# ===============================================
# docker-compose.yml - 氣候預測系統 (簡化版)
# ===============================================

services:
  # MySQL 資料庫服務 (645網格版本)
  mysql:
    image: mysql:8.0
    container_name: climate-mysql-645
    environment:
      MYSQL_ROOT_PASSWORD: climate123
      MYSQL_DATABASE: climate_metadata
      MYSQL_USER: climate_user
      MYSQL_PASSWORD: climatepw
      TZ: Asia/Taipei
    command: >
      --default-authentication-plugin=mysql_native_password 
      --character-set-server=utf8mb4 
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=1G
      --max-connections=1000
      --tmp-table-size=64M
      --max-heap-table-size=64M
      --skip-host-cache
      --bind-address=0.0.0.0
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init_mysql.sql
    networks:
      - climate-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Flask API 服務 (使用現有的run.py)
  flask:
    image: python:3.9-slim
    container_name: climate-flask
    working_dir: /app
    environment:
      FLASK_ENV: development
      MYSQL_HOST: mysql
      MYSQL_DATABASE: climate_metadata
      MYSQL_USER: climate_user
      MYSQL_PASSWORD: climatepw
      TZ: Asia/Taipei
      PYTHONPATH: /app
    volumes:
      - ..:/app
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "5000:5000"
    networks:
      - climate-network
    command: >
      bash -c "
        apt-get update && 
        apt-get install -y gcc default-libmysqlclient-dev pkg-config &&
        pip install -r requirements.txt &&
        python run.py
      "

volumes:
  mysql_data:

networks:
  climate-network:
    driver: bridge
